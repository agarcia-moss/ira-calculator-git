name: Test Build

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  test-build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [18, 20]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint || true
        continue-on-error: true

      - name: Run tests
        run: npm test -- --coverage --watchAll=false

      - name: Build React app
        run: npm run build

      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-0 libnotify4 libnss3 libxss1 libxtst6 xdg-utils libatspi2.0-0 libdrm2 libgbm1 libxcb-dri3-0

      - name: Test Electron build
        run: |
          npm run build-electron-prod
          if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            npm run dist:linux -- --publish=never
          elif [ "${{ matrix.os }}" = "windows-latest" ]; then
            npm run dist:win -- --publish=never
          else
            npm run dist:mac -- --publish=never
          fi
        shell: bash

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        if: matrix.node-version == 18
        with:
          name: test-builds-${{ matrix.os }}
          path: |
            dist/*.exe
            dist/*.dmg
            dist/*.AppImage
            dist/*.deb
          retention-days: 7